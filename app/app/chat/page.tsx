"use client";

import { FormEvent, useMemo, useState } from "react";
import Card from "@/components/Card";
import { showToast } from "@/lib/toast";
import { trackEvent } from "@/lib/analytics";
import clsx from "clsx";

type Message = {
  id: string;
  role: "user" | "assistant";
  text: string;
  time: string;
};

const initialMessages: Message[] = [
  {
    id: "1",
    role: "assistant",
    text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ—á—å? –ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç, —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –ø–æ–¥—Å–æ–±—Ä–∞—Ç—å –∏–¥–µ–∏.",
    time: "09:32",
  },
  {
    id: "2",
    role: "user",
    text: "–ü—Ä–∏–≤–µ—Ç! –ù—É–∂–µ–Ω –ø–ª–∞–Ω –ø–∏—Å—å–º–∞ –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ–±—ã –º—è–≥–∫–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–µ–¥–ª–∞–π–Ω.",
    time: "09:33",
  },
  {
    id: "3",
    role: "assistant",
    text: "–°–æ–±—Ä–∞–ª–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: 1) –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å, 2) —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–∏—á–∏–Ω–µ, 3) –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Ä–æ–∫–∏ –∏ –±–æ–Ω—É—Å. –ú–æ–≥—É —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å?",
    time: "09:33",
  },
];

const chips = [
  "–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—á–µ",
  "–î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É",
  "–°–ø–∏—Å–∫–æ–º",
  "–ü–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è",
  "–ù–∞ ¬´—Ç—ã¬ª",
];

const formatActions = [
  { id: "bold", label: "–ñ–∏—Ä–Ω—ã–π", symbol: "B" },
  { id: "list", label: "–°–ø–∏—Å–æ–∫", symbol: "‚Ä¢" },
  { id: "quote", label: "–¶–∏—Ç–∞—Ç–∞", symbol: "‚ùù" },
];

export default function ChatPage() {
  const [messages, setMessages] = useState<Message[]>(initialMessages);
  const [inputValue, setInputValue] = useState("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –¥–æ–≤–µ—Ä–∏–µ.");
  const [isSending, setIsSending] = useState(false);

  const lastMessages = useMemo(() => messages.slice(-6), [messages]);

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const value = inputValue.trim();
    if (!value) return;

    setIsSending(true);
    const newMessage: Message = {
      id: crypto.randomUUID(),
      role: "user",
      text: value,
      time: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
    };
    setMessages((prev) => [...prev, newMessage]);
    setInputValue("");
    showToast("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    trackEvent("chat_send", { length: value.length });

    window.setTimeout(() => {
      setMessages((prev) => [
        ...prev,
        {
          id: crypto.randomUUID(),
          role: "assistant",
          text: "–ó–∞–ø–∏—Å–∞–ª–∞. –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–∏—Å—å–º–æ –Ω–∞ –º—è–≥–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –∏ –¥–æ–±–∞–≤–ª—é –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –±–æ–Ω—É—Å–∞.",
          time: new Date().toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }),
        },
      ]);
      setIsSending(false);
    }, 800);
  };

  const handleChip = (chip: string) => {
    setInputValue((prev) => (prev ? `${prev}. ${chip}` : chip));
  };

  const handleFormat = (id: string) => {
    showToast(`–ü—Ä–∏–º–µ–Ω–∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç ¬´${id}¬ª`);
  };

  return (
    <div className="space-y-8">
      <header className="scroll-reveal space-y-2">
        <h1 className="text-3xl font-semibold text-text">–ß–∞—Ç</h1>
        <p className="text-sm text-muted">–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –º—ã —É—Ç–æ—á–Ω–∏–º –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.</p>
      </header>

      <section className="scroll-reveal space-y-4">
        <div className="flex flex-wrap items-center gap-2">
          {chips.map((chip) => (
            <button
              key={chip}
              type="button"
              onClick={() => handleChip(chip)}
              className="rounded-full border border-neutral-200/70 bg-white/95 px-3 py-1 text-sm font-semibold text-muted transition hover:text-text"
            >
              {chip}
            </button>
          ))}
        </div>
        <Card className="flex h-[420px] flex-col gap-4 overflow-hidden bg-white/95">
          <div className="flex-1 space-y-3 overflow-y-auto rounded-[14px] bg-neutral-50/70 p-4">
            {lastMessages.map((message) => (
              <div
                key={message.id}
                className={clsx(
                  "max-w-xl rounded-2xl px-4 py-3 text-sm leading-relaxed",
                  message.role === "assistant"
                    ? "bg-white text-text shadow-soft"
                    : "ml-auto bg-primary text-white"
                )}
                aria-label={message.role === "assistant" ? "–°–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞" : "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
              >
                <p>{message.text}</p>
                <span className="mt-2 block text-xs opacity-70">{message.time}</span>
              </div>
            ))}
          </div>
          <form onSubmit={handleSubmit} className="space-y-3">
            <div className="flex items-center gap-2">
              {formatActions.map((action) => (
                <button
                  key={action.id}
                  type="button"
                  onClick={() => handleFormat(action.id)}
                  className="inline-flex h-9 w-9 items-center justify-center rounded-xl border border-neutral-200/70 text-sm font-semibold text-muted transition hover:text-text"
                  aria-label={action.label}
                >
                  {action.symbol}
                </button>
              ))}
              <div className="ml-auto flex items-center gap-2">
                <button
                  type="button"
                  onClick={() => showToast("–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")}
                  className="inline-flex h-9 w-9 items-center justify-center rounded-xl border border-neutral-200/70 text-muted transition hover:text-text"
                  aria-label="–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"
                >
                  üéôÔ∏è
                </button>
                <button
                  type="button"
                  onClick={() => {
                    showToast("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞");
                    trackEvent("file_upload", { source: "chat" });
                  }}
                  className="inline-flex h-9 w-9 items-center justify-center rounded-xl border border-neutral-200/70 text-muted transition hover:text-text"
                  aria-label="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
                >
                  üìé
                </button>
              </div>
            </div>
            <textarea
              value={inputValue}
              onChange={(event) => setInputValue(event.target.value)}
              placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å"
              rows={3}
              className="w-full rounded-2xl border border-neutral-200/70 bg-white/95 px-4 py-3 text-sm text-text placeholder:text-muted focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/30"
            />
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted">–û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –∑–∞ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥. –ú–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å follow-up.</span>
              <button
                type="submit"
                disabled={isSending}
                className="inline-flex items-center gap-2 rounded-xl bg-primary px-4 py-2 text-sm font-semibold text-white transition hover:bg-primary/90 disabled:opacity-60"
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                <span aria-hidden>‚Üó</span>
              </button>
            </div>
          </form>
        </Card>
      </section>
    </div>
  );
}
